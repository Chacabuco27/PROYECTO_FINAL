# OJO: Debes antes tener instalado Streamlit en tu computadora, debes antes definir la ruta de tus archivos y 
##     tener un script de Python (your_script.py) que quieras ejecutar en Streamlit.
# streamlit run your_script.py
# python -m streamlit run music.py
#Instalamos las librer√≠as necesarias
import streamlit as st #Para ejecutar la p√°gina
import pandas as pd #Para acceder a nuestra csv en Visual Studio Code
from streamlit_option_menu import option_menu #Para generar el men√∫ de opciones ubicado al lado izquierdo de la p√°gina
import random #Para la elecci√≥n de un artista aleatorio (ser√° explicado en el apartado utilizado)

# Cargar archivo
df = pd.read_csv("artistas.csv")

# Corregir nombre de columna con espacio extra
df.rename(columns={"artista _musical": "artista_musical"}, inplace=True)

# st.sidebar.image("nombre del logo", use_container_width=True)
# En este apartado, la liber√≠a "option_menu" es primordial
# Con "with st.sidebar" creamos el menu de opciones que contiene las 5 pesta√±as de la p√°gina
with st.sidebar:
    # Mostrar logo encima del men√∫. 
    st.image("logo_ori.png", use_container_width=True)

    # Men√∫ de navegaci√≥n generado con listas
    selected = option_menu(
        menu_title=None,  
        options=["Inicio", 'Descubre', 'Tendencias', 'G√©neros', 'Aportes'], #Lista de pesta√±as
        icons=['house', 'search', 'fire', 'music-note-list', 'envelope'], #Lista de iconos correspondientes a cada pesta√±a
        default_index=0
    )
# Con la funci√≥n "if" condicionamos que si escoge "Inicio" estaremos en la primera pesta√±a    
if selected == "Inicio":
    st.image("logo.png", width=700)
    # La funci√≥n st.markdown permite establecer ciertos par√°metros en texto sen Streamlit
    # el atributo style se utiliza para agregar estilos CSS.
    # <h1 style='text-align: justifty: para alinear el texto. Esto varia de acuerdo a la preferencia
    # font-size: 20px;'>: para el tama√±o de la letra
    # unsafe_allow_html=True: Este es un argumento opcional en la funci√≥n markdown. 
    # Por defecto, streamlit no permite HTML en el texto de Markdown.
    # Sin embargo, establecer unsafe_allow_html en True permite el uso de HTML.
    st.markdown("""
    <div style='text-align: justify; font-size: 20px;'>
    <p>¬°Bienvenido a un viaje sonoro por Ecos del Per√∫! Esta p√°gina es un homenaje vibrante a la m√∫sica peruana en toda su diversidad, desde las monta√±as hasta la selva y las ciudades costeras. Aqu√≠ encontrar√°s una exploraci√≥n profunda de un aproximado de m√°s de diez g√©neros que han marcado la identidad del pa√≠s: desde la energ√≠a contagiante del rock y la cumbia, hasta la fuerza ancestral de la m√∫sica andina y la modernidad del urbano y el hip hop.</p>
    <p>Pero no solo hablamos de estilos, tambi√©n celebramos a quienes los hacen posibles. Navega por las historias de leyendas consagradas y descubre a talentos emergentes que est√°n transformando la escena nacional. Encontrar√°s perfiles de artistas, sus trayectorias, y el impacto social que han generado a trav√©s de la m√∫sica. Esta es m√°s que una p√°gina, es una ventana abierta a los sonidos que nos definen como pa√≠s.</p>
    </div>
    """, unsafe_allow_html=True)
    # Subtitulo 
    st.header('üéº G√©neros Musicales Peruanos')
    # expansor de St. permite insertar un contenedor de varios elementos que pueda expandirse o contraerse
    # Contiene varios elementos y que el usuario puede expandir o contraer. Al contraerlo, solo se ve la etiqueta proporcionada
    with st.expander('Rock'): #Usamos "with" para a√±adir elementos al contenedor devuelto
        st.markdown("<div style='text-align: justify; font-size: 15px;'><p>El rock peruano surgi√≥ en los a√±os 60, influenciado por el beat brit√°nico y el rock psicod√©lico estadounidense, pero pronto empez√≥ a dialogar con la realidad local. Enfrent√≥ censura, golpes militares y desinter√©s comercial, lo que no impidi√≥ su desarrollo en circuitos alternativos. Con el tiempo, incorpor√≥ elementos andinos, criollos y urbanos, dando paso a una identidad sonora √∫nica. Desde bandas pioneras como Los Saicos hasta propuestas contempor√°neas, el rock en Per√∫ ha sido veh√≠culo de rebeld√≠a, cr√≠tica social y expresi√≥n cultural.</div>", unsafe_allow_html=True) 
        st.image('rock_peruano.jpg', width=700)

    with st.expander('Chicha'):
        st.markdown("<div style='text-align: justify; font-size: 15px;'><p>La chicha naci√≥ en los a√±os 70 como una fusi√≥n entre la cumbia colombiana, el rock psicod√©lico y los ritmos andinos tra√≠dos por los migrantes del interior a Lima. Surgi√≥ en un contexto de cambio social, dando voz a sectores populares marginados. A pesar del estigma que enfrent√≥ por d√©cadas, evolucion√≥ con fuerza, integrando teclados el√©ctricos, guitarras distorsionadas y letras urbanas. Hoy, es un s√≠mbolo de identidad cultural y resistencia.</div>", unsafe_allow_html=True) 
        st.image('chicha.jpg', width=700)

    with st.expander('Salsa'):
        st.markdown("<div style='text-align: justify; font-size: 15px;'><p>La salsa en el Per√∫ se populariz√≥ en los a√±os 70, influenciada por el boom salsero de Nueva York y el Caribe, y r√°pidamente fue adoptada por barrios populares lime√±os. En medio de contextos de migraci√≥n y efervescencia urbana, se convirti√≥ en una forma de expresi√≥n colectiva, con letras que hablaban de amor, lucha y cotidianidad. Aunque enfrent√≥ la hegemon√≠a de otros g√©neros, la salsa peruana creci√≥ con orquestas locales que imprimieron su propio estilo. Hoy, sigue viva en pe√±as, conciertos y nuevas generaciones de salseros.</div>", unsafe_allow_html=True) 
        st.image('salsa.png', width=700)

    with st.expander('Cumbia'):
        st.markdown("<div style='text-align: justify; font-size: 15px;'><p>La cumbia peruana emergi√≥ en los a√±os 60 como una adaptaci√≥n local de la cumbia colombiana, fusionada con ritmos amaz√≥nicos, guitarras el√©ctricas y sonidos tropicales. Su auge coincidi√≥ con procesos de migraci√≥n interna, convirti√©ndose en la banda sonora de una nueva identidad urbana. A pesar del rechazo inicial de ciertos sectores, logr√≥ consolidarse como un g√©nero masivo y diverso. Con el tiempo, dio origen a subg√©neros como la cumbia amaz√≥nica y la tecnocumbia.</div>", unsafe_allow_html=True)
        st.image('cumbia.jpg', width=700)

    with st.expander('Hip Hop'):
        st.markdown("<div style='text-align: justify; font-size: 15px;'><p>El hip hop en el Per√∫ naci√≥ en los a√±os 90 como una expresi√≥n de las juventudes urbanas, influenciado por el movimiento global pero profundamente marcado por la realidad local. Surgi√≥ en calles, barrios y plazas, abordando temas como la desigualdad, la discriminaci√≥n y la resistencia. A trav√©s del rap, el breakdance y el graffiti, encontr√≥ formas de visibilizar identidades marginadas. Hoy, el hip hop peruano es un movimiento activo y diverso, con voces potentes desde Lima hasta regiones del interior.</div>", unsafe_allow_html=True)
        st.image('hiphop.jpg', width=500)

    with st.expander('Urbano'):
        st.markdown("<div style='text-align: justify; font-size: 15px;'><p>La m√∫sica urbana en el Per√∫ tom√≥ fuerza en los a√±os 2000, influenciada por el reguet√≥n, el trap y otros ritmos latinos que llegaron desde el Caribe y Estados Unidos. Inicialmente vista como m√∫sica pasajera, fue adoptada por j√≥venes de distintos sectores que encontraron en sus letras una forma de hablar sobre el amor, la fiesta, la lucha diaria y la vida en la ciudad. A lo largo del tiempo, el g√©nero se ha fusionado con sonidos locales, creando un estilo propio y ganando espacios en radios, festivales y plataformas digitales.</div>", unsafe_allow_html=True)
        st.image('urbano.png', width=700)

    with st.expander('Andino'):
        st.markdown("<div style='text-align: justify; font-size: 15px;'><p>La m√∫sica andina en el Per√∫ tiene ra√≠ces ancestrales que se remontan a las civilizaciones prehisp√°nicas, con instrumentos como la quena, el charango y el bombo. Durante siglos, ha sido una forma de preservar la memoria, la cosmovisi√≥n y las tradiciones de los pueblos originarios. En el siglo XX, se revitaliz√≥ con nuevas fusiones y migr√≥ a los espacios urbanos, adapt√°ndose sin perder su esencia. Ha enfrentado estigmas sociales, pero hoy es s√≠mbolo de orgullo e identidad cultural.</div>", unsafe_allow_html=True)
        st.image('andina.jpg', width=700)

    with st.expander('Pop'):
        st.markdown("<div style='text-align: justify; font-size: 15px;'><p>El pop peruano comenz√≥ a consolidarse en las d√©cadas de 1980 y 1990, influenciado por las corrientes del pop latino y anglosaj√≥n, pero adaptado a las sensibilidades locales. Aunque inicialmente tuvo poca visibilidad frente a g√©neros m√°s populares, logr√≥ abrirse paso gracias a artistas que fusionaron melod√≠as accesibles con letras que reflejan vivencias peruanas. En los √∫ltimos a√±os, ha ganado fuerza con propuestas frescas y producciones independientes que mezclan pop con sonidos andinos, urbanos y electr√≥nicos.</div>", unsafe_allow_html=True)
        st.image('pop.png', width=700)

    with st.expander('Criollo'):
        st.markdown("<div style='text-align: justify; font-size: 15px;'><p>La m√∫sica criolla es uno de los pilares de la identidad cultural peruana, con ra√≠ces en la costa y una fusi√≥n de influencias espa√±olas, africanas e ind√≠genas. Surgi√≥ en los barrios populares de Lima como expresi√≥n del alma mestiza, a trav√©s de g√©neros como el vals, la marinera y el festejo. Sus letras hablan de amor, nostalgia, barrio y patria, y durante d√©cadas fue la voz sentimental del pa√≠s. Aunque ha enfrentado cambios generacionales, sigue viva en pe√±as, guitarras y nuevas interpretaciones.</div>", unsafe_allow_html=True)
        st.image('criolla.jpg', width=700)
# Con la funci√≥n "elif" condicionamos que si escoge "Descubre" estaremos en la segunda pesta√±a  
elif selected == "Descubre":
    elecci√≥n = ['artista_musical', 'biograf√≠a', 'Link_informaci√≥n', 'url_imagen', 'g√©nero_musical',
                'audiencia_Spotify', 'canci√≥n_m√°s_escuchada', 'reproducciones', 'url_video']
    # La funci√≥n "random" selecciona aleaotoriamanente un artista de la base de datos
    # df[elecci√≥n]: Accede a un elemento de la lista "elecci√≥n"
    # .sample(1): Toma una muestra aleatoria de un solo elemento de esa lista
    # .iloc[0]: Accede al primer (y √∫nico) valor de esa muestra aleatoria y arroga un artista X
    artista_random = df[elecci√≥n].sample(1).iloc[0]

    st.subheader("üé§ Artista aleatorio:")
    # Parametros para la selecci√≥n de im√°genes
    st.markdown(f"""<div style="text-align: center;">
        <img src="{artista_random['url_imagen']}" width="500" />
        <p style="font-weight: bold;">{artista_random['artista_musical']}</p></div>""",
        unsafe_allow_html=True)
    # Presentaci√≥n de los datos arrogados
    # Crear dos columnas para distribuir la informaci√≥n y que se visualice de manera ordenada
    col1, col2 = st.columns([1, 2]) 

    # Columna 1: 5 datos 
    with col1:
        st.markdown(f"**üé∂ Nombre:** {artista_random['artista_musical']}")
        st.markdown(f"**üéß G√©nero:** {artista_random['g√©nero_musical']}")
        st.markdown(f"**üåç Audiencia en Spotify:** {artista_random['audiencia_Spotify']}")
        st.markdown(f"[üîó M√°s informaci√≥n]({artista_random['Link_informaci√≥n']})")
        st.markdown(f"[üé¨ Ver video]({artista_random['url_video']})")
    # Columna 2: 2 datos
    with col2:
        st.markdown(f"<div style='text-align: justify; font-size: 15px;'><strong>üìù Biograf√≠a:</strong> {artista_random['biograf√≠a']}</div>",
        unsafe_allow_html=True)
        st.markdown(f"**üî• Canci√≥n m√°s escuchada:** {artista_random['canci√≥n_m√°s_escuchada']} ({artista_random['reproducciones']} reproducciones)")

# Con la funci√≥n "elif" condicionamos que si escoge "Tendencias" estaremos en la tercera pesta√±a  
elif selected == "Tendencias":
    # Funci√≥n para convertir valores de audiencia como '3.2M' o '850K' a n√∫mero real
    def convertir_audiencia(valor):
        if pd.isna(valor): #Si el valor es Nan, se devuelve 0
            return 0
        if isinstance(valor, str): #Si es cadena de texto, se limpia y convierte
            valor = valor.strip()
            if 'M' in valor:
                return float(valor.replace('M', '')) * 1_000_000 #3.2M -> 3,200,000
            elif 'k' in valor:
                return float(valor.replace('k', '')) * 1_000 #850k -> 850,000
            else:
                try:
                    return float(valor)
                except ValueError:
                    return 0
        try:
            return float(valor)  #Si ya es num√©rico, lo convierte directamente
        except:
            return 0

    # Aplicamos la conversi√≥n a la columna de audiencia original
    # Se crea una nueva columna audiencia_convertidas en el DataFrame con los valores num√©ricos procesados a partir de audiencia_Spotify
    df['audiencia_convertida'] = df['audiencia_Spotify'].apply(convertir_audiencia)

    # Ordenamos los artistas por mayor audiencia y tomamos los 10 m√°s altos
    # Se genera un nuevo DataFrame con los 10 artistas con mayor audiencia en Spotify
    # ordenadnos de forma descendente "ascending=False"
    top_10 = df.sort_values(by='audiencia_convertida', ascending=False).head(10)

    # Se a√±ade una columna con el ranking del 1 al 10
    # Se asignan los puestos del ranking de manera secuencial
    top_10['Ranking'] = range(1, len(top_10) + 1)

    # Reiniciamos el √≠nidce para mostrar una tabla limpia
    # Se elimina el √≠ndice original del DF para evitar confusi√≥n en la visualizaci√≥n
    top_10 = top_10.reset_index(drop=True)

    # Encabezado
    st.subheader("üî• Top Artistas en Tendencia")

# Recorremos cada artista del Top 10 para mostrar su imagen y datos
    for index, row in top_10.iterrows():
        # Dividimos en 2 columnas: imagen | info
        col1, col2 = st.columns([1.2, 3])

        with col1:
            # Mostramos la imagen del artista en un tama√±o definido
            st.image(row['url_imagen'], width=160)

        with col2:
            # Nombre del artista con ranking
            st.markdown(f"### {row['Ranking']}. {row['artista_musical']}")
            # Audiencia visual
            st.markdown(f"üéß Audiencia: {row['audiencia_Spotify']}")
# Con la funci√≥n "elif" condicionamos que si escoge "G√©neros" estaremos en la cuarta pesta√±a
elif selected == "G√©neros":
    st.subheader("üé∂ Explora artistas por g√©nero musical")

    # Diccionario de im√°genes por g√©nero
    imagenes_genero = {
        'Andino': 'andina.jpg',
        'Chicha': 'chicha.jpg',
        'Criollo': 'criolla.jpg',
        'Cumbia': 'cumbia.jpg',
        'Electr√≥nica': 'electronica.jpeg',
        'Fusi√≥n': 'fusion.jpeg',
        'Hip hop': 'hiphop.jpg',
        'Humor/Viral': 'humor.png',
        'Parodia': 'parodia.jpg',
        'Pop': 'pop.png',
        'Reggae/Funk': 'reggae.jpeg',
        'Rock': 'rock_peruano.jpg',
        'Salsa': 'salsa.png',
        'Tecnocumbia': 'tecnocumbia.jpeg',
        'Urbano': 'urbano.png',
    }
    # Se extraen los nombres de los g√©neros como una lista para iterar sobre ellos f√°cilmente
    lista_generos = list(imagenes_genero.keys())

    # Inicializamos el estado del g√©nero elegido si a√∫n no existe
    # El estado de sesi√≥n se utiliza para guardar qu√© g√©nero ha elegido el usuario
    if "genero_elegido" not in st.session_state:
        st.session_state.genero_elegido = None

    # Si a√∫n no se ha elegido un g√©nero, mostrar las im√°genes como botones
    if st.session_state.genero_elegido is None:
        st.markdown("Selecciona un g√©nero musical:")
        cols = st.columns(4) #Distribuye los g√©neros en 4 columnas
        for i, genero in enumerate(lista_generos):
            col = cols[i % 4] #Asigna cada g√©nero a una columna c√≠clicamente
            with col:
                st.image(imagenes_genero[genero], use_container_width=True) #Imagen del g√©nero
                if st.button(f"{genero}", key=genero): # Bot√≥n con el nombre del g√©nero
                    st.session_state.genero_elegido = genero #Guarda la elecci√≥n
                    st.rerun() # Recarga la app para mostrar artistas del g√©nero

    # Mostrar artistas si ya se eligi√≥ un g√©nero
    else:
        genero = st.session_state.genero_elegido
        st.markdown(f"### üéß Artistas del g√©nero: {genero}")
        #Filtra el DF para mostrar solo artistas que contengan el g√©nero elegido
        df_filtrado = df[df['g√©nero_musical'].str.contains(genero, case=False, na=False)]
        # Si no se encuentran artistas, se muestra una advertencia
        if df_filtrado.empty:
            st.warning("No se encontraron artistas con ese g√©nero.")
        #Si hay artistas, se muestran uno por uno
        else:
            for index, row in df_filtrado.iterrows():
                col1, col2 = st.columns([1.2, 3])
                with col1:
                    st.image(row['url_imagen'], use_container_width=True)
                with col2:
                    st.markdown(f"### {row['artista_musical']}")
                    st.markdown(f"üéß Audiencia: {row['audiencia_Spotify']}")
                    st.markdown(f"üéµ G√©nero: {row['g√©nero_musical']}")

        st.markdown("---")
        # Bot√≥n para regresar a la selecci√≥n de g√©neros
        if st.button("üîô Volver a g√©neros"):
            st.session_state.genero_elegido = None #Reinicia la selecci√≥n
            st.rerun() #Recarga la app para volver a mostrar los botones por g√©nero
# Con la funci√≥n "elif" condicionamos que si escoge "Aportes" estaremos en la quinta pesta√±a
elif selected == "Aportes":
    st.title("üì¨ Aporta un artista a Ecos del Per√∫")

    st.markdown("¬øConoces un artista peruano que deba estar aqu√≠? ¬°Comp√°rtenos su informaci√≥n!")
    # st.session_state guarda si el usuario ya ha enviado un aporte durante la sesi√≥n actual,
    # evitanso que se vuelva a mostrar el formulario tras el env√≠o
    # Inicializa el estado para controlar si ya se envi√≥ un aporte
    if "aporte_enviado" not in st.session_state:
        st.session_state.aporte_enviado = False

    if not st.session_state.aporte_enviado:
        #Secci√≥n del formulario
        with st.form("form_aporte"):
            nombre = st.text_input("üé§ Nombre del artista")
            url_imagen = st.text_input("üñºÔ∏è URL de la imagen")
            biografia = st.text_area("üìñ Biograf√≠a del artista")
            audiencia = st.text_input("üë• Audiencia mensual en Spotify (ej: 3.2M o 120K)")
            cancion_mas_escuchada = st.text_input("üéß Canci√≥n m√°s escuchada")
            link_cancion = st.text_input("üîó Link de la canci√≥n en Spotify")
            vistas_cancion = st.text_input("üìà Visualizaciones/reproducciones de la canci√≥n")

            submit = st.form_submit_button("Enviar aporte")

        if submit:
            #Validaci√≥n: nos aseguramos de que todos los campos est√©n llenos
            if all([
                nombre.strip(),
                url_imagen.strip(),
                biografia.strip(),
                audiencia.strip(),
                cancion_mas_escuchada.strip(),
                link_cancion.strip(),
                vistas_cancion.strip()
            ]):
                nuevo = {
                    "artista_musical": nombre,
                    "url_imagen": url_imagen,
                    "biograf√≠a": biografia,
                    "audiencia_Spotify": audiencia,
                    "canci√≥n_m√°s_escuchada": cancion_mas_escuchada,
                    "url_video": link_cancion,
                    "reproducciones": vistas_cancion
                }
            # Si la validaci√≥n es exitosa, se construye un diccionaro con los datos del nuevo artista para agregarlo a un arhcivo .csv
            # aportes.csv almacenar√° los aportes que se hagan. 
                try:
                    df_aportes = pd.read_csv("aportes.csv")
                except FileNotFoundError:
                    df_aportes = pd.DataFrame(columns=nuevo.keys())
                # En este caso, el archivo no existe al ingresar por primera vez los aportes, entonces se crea un nuevo DF con las mismas
                # columnas que el diccionario "nuevo"
                df_aportes = pd.concat([df_aportes, pd.DataFrame([nuevo])], ignore_index=True)
                df_aportes.to_csv("aportes.csv", index=False)
                #Se actualiza el estado de sesi√≥n para indicar que el aporte ya fue enviado y se recarga la pesta√±a para 
                #mostrar el mensaje de √©xito en lugar del formulario 
                st.session_state.aporte_enviado = True
                st.rerun()
            # Si hay campos vac√≠os, sem muestra un mensaje de error para advertir el usuario
            else:
                st.error("Por favor, completa **todos los campos** antes de enviar el aporte.")
    # Si envi√≥ de manera correcta su aporte, se presneta un mensaje de agradecimiento en lugar del formulario
    else:
        st.success("¬°Gracias por tu aporte! El artista ha sido registrado correctamente. üôå")
